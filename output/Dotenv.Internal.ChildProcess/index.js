// Generated by purs version 0.15.7
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Posix_Signal from "../Data.Posix.Signal/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Node_ChildProcess from "../Node.ChildProcess/index.js";
import * as Run from "../Run/index.js";
import * as Sunde from "../Sunde/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var show1 = /* #__PURE__ */ Data_Show.show(Data_Posix_Signal.showSignal);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorFn);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var Spawn = /* #__PURE__ */ (function () {
    function Spawn(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Spawn.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Spawn(value0, value1, value2);
            };
        };
    };
    return Spawn;
})();
var handleChildProcess = function (v) {
    return bind(Sunde.spawn({
        cmd: v.value0,
        args: v.value1,
        stdin: Data_Maybe.Nothing.value
    })(Node_ChildProcess.defaultSpawnOptions))(function (v1) {
        if (v1.exit instanceof Node_ChildProcess.Normally && v1.exit.value0 === 0) {
            return pure(v.value2(v1.stdout));
        };
        if (v1.exit instanceof Node_ChildProcess.Normally) {
            return throwError(Effect_Exception.error("Exited with code " + (show(v1.exit.value0) + (": " + v1.stderr))));
        };
        if (v1.exit instanceof Node_ChildProcess.BySignal) {
            return throwError(Effect_Exception.error("Exited: " + show1(v1.exit.value0)));
        };
        throw new Error("Failed pattern match at Dotenv.Internal.ChildProcess (line 30, column 3 - line 36, column 53): " + [ v1.exit.constructor.name ]);
    });
};
var functorChildProcessF = {
    map: function (f) {
        return function (m) {
            return new Spawn(m.value0, m.value1, map(f)(m.value2));
        };
    }
};
var lift = /* #__PURE__ */ Run.lift()({
    reflectSymbol: function () {
        return "childProcess";
    }
})(functorChildProcessF);
var _childProcess = /* #__PURE__ */ (function () {
    return Type_Proxy["Proxy"].value;
})();
var spawn = function (cmd) {
    return function (args) {
        return lift(_childProcess)(new Spawn(cmd, args, identity));
    };
};
export {
    Spawn,
    _childProcess,
    handleChildProcess,
    spawn,
    functorChildProcessF
};
