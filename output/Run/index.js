// Generated by purs version 0.15.7
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Free from "../Control.Monad.Free/index.js";
import * as Control_Monad_Rec_Class from "../Control.Monad.Rec.Class/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Functor_Variant from "../Data.Functor.Variant/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Partial_Unsafe from "../Partial.Unsafe/index.js";
import * as Run_Internal from "../Run.Internal/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
import * as Unsafe_Coerce from "../Unsafe.Coerce/index.js";
var $runtime_lazy = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor_Variant.functorVariantF);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var match = /* #__PURE__ */ Data_Functor_Variant.match()()();
var liftEffect1 = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var runFreeM = /* #__PURE__ */ Control_Monad_Free.runFreeM(Data_Functor_Variant.functorVariantF);
var inj = /* #__PURE__ */ Data_Functor_Variant.inj();
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var Run = function (x) {
    return x;
};
var send = function ($92) {
    return Run(Control_Monad_Free.liftF($92));
};
var newtypeRun = {
    Coercible0: function () {
        return undefined;
    }
};
var resume = function (k1) {
    return function (k2) {
        var $93 = Control_Monad_Free["resume$prime"](function (x) {
            return function (f) {
                return k1(map(function ($95) {
                    return Run(f($95));
                })(x));
            };
        })(k2);
        return function ($94) {
            return $93(unwrap($94));
        };
    };
};
var peel = /* #__PURE__ */ (function () {
    return resume(Data_Either.Left.create)(Data_Either.Right.create);
})();
var run = function (dictMonad) {
    var bindFlipped = Control_Bind.bindFlipped(dictMonad.Bind1());
    var pure1 = Control_Applicative.pure(dictMonad.Applicative0());
    return function (k) {
        var $lazy_loop = $runtime_lazy("loop", "Run", function () {
            return resume(function (a) {
                return bindFlipped($lazy_loop(197))(k(a));
            })(pure1);
        });
        var loop = $lazy_loop(196);
        return loop;
    };
};
var run1 = /* #__PURE__ */ run(Effect_Aff.monadAff);
var runBaseAff = /* #__PURE__ */ run1(/* #__PURE__ */ match({
    aff: function (a) {
        return a;
    }
}));
var runBaseAff$prime = /* #__PURE__ */ run1(/* #__PURE__ */ match({
    aff: function (a) {
        return a;
    },
    effect: function (a) {
        return liftEffect1(a);
    }
}));
var runAccum = function (dictMonad) {
    var bindFlipped = Control_Bind.bindFlipped(dictMonad.Bind1());
    var pure1 = Control_Applicative.pure(dictMonad.Applicative0());
    return function (k) {
        var loop = function (s) {
            return resume(function (b) {
                return bindFlipped(Data_Tuple.uncurry(loop))(k(s)(b));
            })(pure1);
        };
        return loop;
    };
};
var runAccumCont = function (k1) {
    return function (k2) {
        var loop = function (s) {
            return resume(function (b) {
                return k1(s)(map(Data_Function.flip(loop))(b));
            })(k2(s));
        };
        return loop;
    };
};
var runAccumRec = function (dictMonadRec) {
    var Monad0 = dictMonadRec.Monad0();
    var map1 = Data_Functor.map(((Monad0.Bind1()).Apply0()).Functor0());
    var pure1 = Control_Applicative.pure(Monad0.Applicative0());
    var tailRecM = Control_Monad_Rec_Class.tailRecM(dictMonadRec);
    return function (k) {
        var loop = function (s) {
            return resume(function (b) {
                return map1(Control_Monad_Rec_Class.Loop.create)(k(s)(b));
            })(function ($96) {
                return pure1(Control_Monad_Rec_Class.Done.create($96));
            });
        };
        return Data_Tuple.curry(tailRecM(Data_Tuple.uncurry(loop)));
    };
};
var runCont = function (k1) {
    return function (k2) {
        var $lazy_loop = $runtime_lazy("loop", "Run", function () {
            return resume(function (b) {
                return k1(map($lazy_loop(233))(b));
            })(k2);
        });
        var loop = $lazy_loop(232);
        return loop;
    };
};
var runRec = function (dictMonadRec) {
    var runFreeM1 = runFreeM(dictMonadRec);
    return function (k) {
        var $97 = runFreeM1(k);
        return function ($98) {
            return $97(unwrap($98));
        };
    };
};
var runBaseEffect = /* #__PURE__ */ runRec(Control_Monad_Rec_Class.monadRecEffect)(/* #__PURE__ */ match({
    effect: function (a) {
        return a;
    }
}));
var monadRun = Control_Monad_Free.freeMonad;
var lift = function () {
    return function (dictIsSymbol) {
        var inj1 = inj(dictIsSymbol);
        return function (dictFunctor) {
            var inj2 = inj1(dictFunctor);
            return function (p) {
                var $99 = inj2(p);
                return function ($100) {
                    return Run(Control_Monad_Free.liftF($99($100)));
                };
            };
        };
    };
};
var lift1 = /* #__PURE__ */ lift();
var liftAff = /* #__PURE__ */ (function () {
    return lift1({
        reflectSymbol: function () {
            return "aff";
        }
    })(Effect_Aff.functorAff)(Type_Proxy["Proxy"].value);
})();
var liftChoose = /* #__PURE__ */ lift1({
    reflectSymbol: function () {
        return "choose";
    }
})(Run_Internal.functorChoose)(Run_Internal["_choose"]);
var liftEffect = /* #__PURE__ */ (function () {
    return lift1({
        reflectSymbol: function () {
            return "effect";
        }
    })(Effect.functorEffect)(Type_Proxy["Proxy"].value);
})();
var runMonadEffect = function (dictTypeEquals) {
    return {
        liftEffect: (function () {
            var $101 = Run_Internal.fromRows(dictTypeEquals);
            return function ($102) {
                return $101(liftEffect($102));
            };
        })(),
        Monad0: function () {
            return monadRun;
        }
    };
};
var runMonadAff = function (dictTypeEquals) {
    var runMonadEffect1 = runMonadEffect(dictTypeEquals);
    return {
        liftAff: (function () {
            var $103 = Run_Internal.fromRows(dictTypeEquals);
            return function ($104) {
                return $103(liftAff($104));
            };
        })(),
        MonadEffect0: function () {
            return runMonadEffect1;
        }
    };
};
var interpretRec = function (dictMonadRec) {
    return runRec(dictMonadRec);
};
var interpret = function (dictMonad) {
    return run(dictMonad);
};
var functorRun = Control_Monad_Free.freeFunctor;
var extract = /* #__PURE__ */ (function () {
    var $105 = Control_Monad_Free.runFree(Data_Functor_Variant.functorVariantF)(function (v) {
        return Partial_Unsafe.unsafeCrashWith("Run: the impossible happened");
    });
    return function ($106) {
        return $105(unwrap($106));
    };
})();
var expand = function () {
    return Unsafe_Coerce.unsafeCoerce;
};
var bindRun = Control_Monad_Free.freeBind;
var bind = /* #__PURE__ */ Control_Bind.bind(bindRun);
var runAlt = function (dictTypeEquals) {
    var fromRows = Run_Internal.fromRows(dictTypeEquals);
    var toRows = Run_Internal.toRows(dictTypeEquals);
    return {
        alt: function (a) {
            return function (b) {
                return fromRows(bind(liftChoose(new Run_Internal.Alt(identity)))(function (v) {
                    if (v) {
                        return toRows(a);
                    };
                    return toRows(b);
                }));
            };
        },
        Functor0: function () {
            return functorRun;
        }
    };
};
var runPlus = function (dictTypeEquals) {
    var runAlt1 = runAlt(dictTypeEquals);
    return {
        empty: Run_Internal.fromRows(dictTypeEquals)(liftChoose(Run_Internal.Empty.value)),
        Alt0: function () {
            return runAlt1;
        }
    };
};
var applyRun = Control_Monad_Free.freeApply;
var applicativeRun = Control_Monad_Free.freeApplicative;
var pure = /* #__PURE__ */ Control_Applicative.pure(applicativeRun);
var monadRecRun = {
    tailRecM: function (f) {
        var loop = function (a) {
            return bind(f(a))(function (b) {
                if (b instanceof Control_Monad_Rec_Class.Done) {
                    return pure(b.value0);
                };
                if (b instanceof Control_Monad_Rec_Class.Loop) {
                    return loop(b.value0);
                };
                throw new Error("Failed pattern match at Run (line 110, column 7 - line 112, column 25): " + [ b.constructor.name ]);
            });
        };
        return loop;
    },
    Monad0: function () {
        return monadRun;
    }
};
var runAccumPure = function (k1) {
    return function (k2) {
        var loop = function ($copy_s) {
            return function ($copy_r) {
                var $tco_var_s = $copy_s;
                var $tco_done = false;
                var $tco_result;
                function $tco_loop(s, r) {
                    var v = peel(r);
                    if (v instanceof Data_Either.Left) {
                        var v1 = k1(s)(v.value0);
                        if (v1 instanceof Control_Monad_Rec_Class.Loop) {
                            $tco_var_s = v1.value0.value0;
                            $copy_r = v1.value0.value1;
                            return;
                        };
                        if (v1 instanceof Control_Monad_Rec_Class.Done) {
                            $tco_done = true;
                            return bind(send(v1.value0))(runAccumPure(k1)(k2)(s));
                        };
                        throw new Error("Failed pattern match at Run (line 307, column 15 - line 309, column 50): " + [ v1.constructor.name ]);
                    };
                    if (v instanceof Data_Either.Right) {
                        $tco_done = true;
                        return pure(k2(s)(v.value0));
                    };
                    throw new Error("Failed pattern match at Run (line 306, column 14 - line 311, column 20): " + [ v.constructor.name ]);
                };
                while (!$tco_done) {
                    $tco_result = $tco_loop($tco_var_s, $copy_r);
                };
                return $tco_result;
            };
        };
        return loop;
    };
};
var runAlternative = function (dictTypeEquals) {
    var runPlus1 = runPlus(dictTypeEquals);
    return {
        Applicative0: function () {
            return applicativeRun;
        },
        Plus1: function () {
            return runPlus1;
        }
    };
};
var runPure = function (k) {
    var loop = function ($copy_r) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(r) {
            var v = peel(r);
            if (v instanceof Data_Either.Left) {
                var v1 = k(v.value0);
                if (v1 instanceof Control_Monad_Rec_Class.Loop) {
                    $copy_r = v1.value0;
                    return;
                };
                if (v1 instanceof Control_Monad_Rec_Class.Done) {
                    $tco_done = true;
                    return bind(send(v1.value0))(runPure(k));
                };
                throw new Error("Failed pattern match at Run (line 288, column 15 - line 290, column 39): " + [ v1.constructor.name ]);
            };
            if (v instanceof Data_Either.Right) {
                $tco_done = true;
                return pure(v.value0);
            };
            throw new Error("Failed pattern match at Run (line 287, column 12 - line 292, column 13): " + [ v.constructor.name ]);
        };
        while (!$tco_done) {
            $tco_result = $tco_loop($copy_r);
        };
        return $tco_result;
    };
    return loop;
};
export {
    Run,
    lift,
    send,
    extract,
    interpret,
    interpretRec,
    run,
    runRec,
    runCont,
    runPure,
    runAccum,
    runAccumRec,
    runAccumCont,
    runAccumPure,
    peel,
    resume,
    expand,
    liftEffect,
    liftAff,
    runBaseEffect,
    runBaseAff,
    runBaseAff$prime,
    newtypeRun,
    functorRun,
    applyRun,
    applicativeRun,
    bindRun,
    monadRun,
    monadRecRun,
    runMonadEffect,
    runMonadAff,
    runAlt,
    runPlus,
    runAlternative
};
export {
    Done,
    Loop
} from "../Control.Monad.Rec.Class/index.js";
export {
    case_,
    default,
    inj,
    match,
    on,
    onMatch
} from "../Data.Functor.Variant/index.js";
