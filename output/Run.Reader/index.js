// Generated by purs version 0.15.7
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Functor_Variant from "../Data.Functor.Variant/index.js";
import * as Run from "../Run/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var $runtime_lazy = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var on = /* #__PURE__ */ Data_Functor_Variant.on();
var bind = /* #__PURE__ */ Control_Bind.bind(Run.bindRun);
var pure = /* #__PURE__ */ Control_Applicative.pure(Run.applicativeRun);
var lift = /* #__PURE__ */ Run.lift();
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var map = /* #__PURE__ */ Data_Functor.map(Run.functorRun);
var readerIsSymbol = {
    reflectSymbol: function () {
        return "reader";
    }
};
var Reader = function (x) {
    return x;
};
var runReaderAt = function (dictIsSymbol) {
    var on1 = on(dictIsSymbol);
    return function () {
        return function (sym) {
            var handle = on1(sym)(Data_Either.Left.create)(Data_Either.Right.create);
            var loop = function ($copy_e) {
                return function ($copy_r) {
                    var $tco_var_e = $copy_e;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(e, r) {
                        var v = Run.peel(r);
                        if (v instanceof Data_Either.Left) {
                            var v1 = handle(v.value0);
                            if (v1 instanceof Data_Either.Left) {
                                $tco_var_e = e;
                                $copy_r = v1.value0(e);
                                return;
                            };
                            if (v1 instanceof Data_Either.Right) {
                                $tco_done = true;
                                return bind(Run.send(v1.value0))(runReaderAt(dictIsSymbol)()(sym)(e));
                            };
                            throw new Error("Failed pattern match at Run.Reader (line 111, column 15 - line 115, column 42): " + [ v1.constructor.name ]);
                        };
                        if (v instanceof Data_Either.Right) {
                            $tco_done = true;
                            return pure(v.value0);
                        };
                        throw new Error("Failed pattern match at Run.Reader (line 110, column 14 - line 117, column 13): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_e, $copy_r);
                    };
                    return $tco_result;
                };
            };
            return loop;
        };
    };
};
var functorReader = Data_Functor.functorFn;
var liftReaderAt = function (dictIsSymbol) {
    var lift1 = lift(dictIsSymbol)(functorReader);
    return function () {
        return lift1;
    };
};
var asksAt = function (dictIsSymbol) {
    var liftReaderAt1 = liftReaderAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return function (f) {
                return liftReaderAt1(sym)(f);
            };
        };
    };
};
var askAt = function (dictIsSymbol) {
    var asksAt1 = asksAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return asksAt1(sym)(identity);
        };
    };
};
var localAt = function (dictIsSymbol) {
    var on1 = on(dictIsSymbol);
    var askAt1 = askAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            var handle = on1(sym)(Data_Either.Left.create)(Data_Either.Right.create);
            var $lazy_runLocal = $runtime_lazy("runLocal", "Run.Reader", function () {
                var loop = function ($copy_e) {
                    return function ($copy_r) {
                        var $tco_var_e = $copy_e;
                        var $tco_done = false;
                        var $tco_result;
                        function $tco_loop(e, r) {
                            var v = Run.peel(r);
                            if (v instanceof Data_Either.Left) {
                                var v1 = handle(v.value0);
                                if (v1 instanceof Data_Either.Left) {
                                    $tco_var_e = e;
                                    $copy_r = v1.value0(e);
                                    return;
                                };
                                if (v1 instanceof Data_Either.Right) {
                                    $tco_done = true;
                                    return bind(Run.send(v.value0))($lazy_runLocal(92)(e));
                                };
                                throw new Error("Failed pattern match at Run.Reader (line 88, column 17 - line 92, column 36): " + [ v1.constructor.name ]);
                            };
                            if (v instanceof Data_Either.Right) {
                                $tco_done = true;
                                return pure(v.value0);
                            };
                            throw new Error("Failed pattern match at Run.Reader (line 87, column 16 - line 94, column 15): " + [ v.constructor.name ]);
                        };
                        while (!$tco_done) {
                            $tco_result = $tco_loop($tco_var_e, $copy_r);
                        };
                        return $tco_result;
                    };
                };
                return loop;
            });
            var runLocal = $lazy_runLocal(85);
            return function (f) {
                return function (r) {
                    return bind(map(f)(askAt1(sym)))(Data_Function.flip(runLocal)(r));
                };
            };
        };
    };
};
var _reader = /* #__PURE__ */ (function () {
    return Type_Proxy["Proxy"].value;
})();
var ask = /* #__PURE__ */ askAt(readerIsSymbol)()(_reader);
var asks = /* #__PURE__ */ asksAt(readerIsSymbol)()(_reader);
var liftReader = /* #__PURE__ */ liftReaderAt(readerIsSymbol)()(_reader);
var local = /* #__PURE__ */ localAt(readerIsSymbol)()(_reader);
var runReader = /* #__PURE__ */ runReaderAt(readerIsSymbol)()(_reader);
export {
    Reader,
    _reader,
    liftReader,
    liftReaderAt,
    ask,
    asks,
    askAt,
    asksAt,
    local,
    localAt,
    runReader,
    runReaderAt,
    functorReader
};
