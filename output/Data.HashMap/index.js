// Generated by purs version 0.15.7
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_FunctorWithIndex from "../Data.FunctorWithIndex/index.js";
import * as Data_Hashable from "../Data.Hashable/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_TraversableWithIndex from "../Data.TraversableWithIndex/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var SemigroupHashMap = function (x) {
    return x;
};
var values = /* #__PURE__ */ $foreign.toArrayBy(function (v) {
    return function (v1) {
        return v1;
    };
});
var unionWith = function (dictHashable) {
    var eq = Data_Eq.eq(dictHashable.Eq0());
    var hash = Data_Hashable.hash(dictHashable);
    return function (f) {
        return $foreign.unionWithPurs(eq, hash, f);
    };
};
var union = function (dictHashable) {
    return $foreign.unionWithPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable), Data_Function["const"]);
};
var singleton = function (dictHashable) {
    var hash = Data_Hashable.hash(dictHashable);
    return function (k) {
        return $foreign.singletonPurs(k)(hash(k));
    };
};
var showHashMap = function (dictShow) {
    var showTuple = Data_Tuple.showTuple(dictShow);
    return function (dictShow1) {
        var show = Data_Show.show(Data_Show.showArray(showTuple(dictShow1)));
        return {
            show: function (m) {
                return "(fromArray " + (show($foreign.toArrayBy(Data_Tuple.Tuple.create)(m)) + ")");
            }
        };
    };
};
var showSemigroupHashMap = function (dictShow) {
    var showHashMap1 = showHashMap(dictShow);
    return function (dictShow1) {
        return showHashMap1(dictShow1);
    };
};
var semigroupSemigroupHashMap = function (dictHashable) {
    var unionWith1 = unionWith(dictHashable);
    return function (dictSemigroup) {
        var append1 = Data_Semigroup.append(dictSemigroup);
        return {
            append: function (v) {
                return function (v1) {
                    return unionWith1(append1)(v)(v1);
                };
            }
        };
    };
};
var semigroupHashMap = function (dictHashable) {
    var unionWith1 = unionWith(dictHashable);
    return function (dictSemigroup) {
        return {
            append: unionWith1(Data_Semigroup.append(dictSemigroup))
        };
    };
};
var nubHash = function (dictHashable) {
    return $foreign.nubHashPurs(Data_Maybe.Nothing.value, Data_Maybe.Just.create, Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};
var newtypeSemigroupHashMap = {
    Coercible0: function () {
        return undefined;
    }
};
var monoidSemigroupHashMap = function (dictHashable) {
    var semigroupSemigroupHashMap1 = semigroupSemigroupHashMap(dictHashable);
    return function (dictSemigroup) {
        var semigroupSemigroupHashMap2 = semigroupSemigroupHashMap1(dictSemigroup);
        return {
            mempty: $foreign.empty,
            Semigroup0: function () {
                return semigroupSemigroupHashMap2;
            }
        };
    };
};
var monoidHashMap = function (dictHashable) {
    var semigroupHashMap1 = semigroupHashMap(dictHashable);
    return function (dictSemigroup) {
        var semigroupHashMap2 = semigroupHashMap1(dictSemigroup);
        return {
            mempty: $foreign.empty,
            Semigroup0: function () {
                return semigroupHashMap2;
            }
        };
    };
};
var lookup = function (dictHashable) {
    var eq = Data_Eq.eq(dictHashable.Eq0());
    var hash = Data_Hashable.hash(dictHashable);
    return function (k) {
        return $foreign.lookupPurs(Data_Maybe.Nothing.value, Data_Maybe.Just.create, eq, k, hash(k));
    };
};
var member = function (dictHashable) {
    var lookup1 = lookup(dictHashable);
    return function (k) {
        var $155 = lookup1(k);
        return function ($156) {
            return Data_Maybe.isJust($155($156));
        };
    };
};
var keys = /* #__PURE__ */ $foreign.toArrayBy(Data_Function["const"]);
var intersectionWith = function (dictHashable) {
    var eq = Data_Eq.eq(dictHashable.Eq0());
    var hash = Data_Hashable.hash(dictHashable);
    return function (f) {
        return $foreign.intersectionWithPurs(Data_Maybe.Nothing.value, Data_Maybe.Just.create, eq, hash, f);
    };
};
var intersection = function (dictHashable) {
    return intersectionWith(dictHashable)(function (v) {
        return function (x) {
            return x;
        };
    });
};
var insertWith = function (dictHashable) {
    return $foreign.insertWithPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};
var upsert = function (dictHashable) {
    var insertWith1 = insertWith(dictHashable);
    return function (f) {
        return insertWith1(function (v) {
            return function (v1) {
                return f(v);
            };
        });
    };
};
var insert = function (dictHashable) {
    return $foreign.insertPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};
var functorWithIndexHashMap = {
    mapWithIndex: $foreign.mapWithIndexPurs,
    Functor0: function () {
        return functorHashMap;
    }
};
var functorHashMap = {
    map: function (f) {
        return Data_FunctorWithIndex.mapWithIndex(functorWithIndexHashMap)(Data_Function["const"](f));
    }
};
var map = /* #__PURE__ */ Data_Functor.map(functorHashMap);
var mapWithIndex = /* #__PURE__ */ Data_FunctorWithIndex.mapWithIndex(functorWithIndexHashMap);
var functorSemigroupHashMap = functorHashMap;
var functorWithIndexSemigroupHashMap = functorWithIndexHashMap;
var fromFoldableWithIndex = function (dictFoldableWithIndex) {
    var foldlWithIndex = Data_FoldableWithIndex.foldlWithIndex(dictFoldableWithIndex);
    return function (dictHashable) {
        var insert1 = insert(dictHashable);
        return foldlWithIndex(function (k) {
            return function (m) {
                return function (v) {
                    return insert1(k)(v)(m);
                };
            };
        })($foreign.empty);
    };
};
var fromFoldableBy = function (dictFoldable) {
    var foldl = Data_Foldable.foldl(dictFoldable);
    return function (dictHashable) {
        var insert1 = insert(dictHashable);
        return function (kf) {
            return function (vf) {
                return foldl(function (m) {
                    return function (a) {
                        return insert1(kf(a))(vf(a))(m);
                    };
                })($foreign.empty);
            };
        };
    };
};
var fromFoldable = function (dictFoldable) {
    var foldl = Data_Foldable.foldl(dictFoldable);
    return function (dictHashable) {
        var insert1 = insert(dictHashable);
        return foldl(function (m) {
            return function (v) {
                return insert1(v.value0)(v.value1)(m);
            };
        })($foreign.empty);
    };
};
var fromArrayBy = function (dictHashable) {
    return $foreign.fromArrayPurs(Data_Eq.eq(dictHashable.Eq0()), Data_Hashable.hash(dictHashable));
};
var fromArray = function (dictHashable) {
    return fromArrayBy(dictHashable)(Data_Tuple.fst)(Data_Tuple.snd);
};
var foldableWithIndexHashMap = {
    foldMapWithIndex: function (dictMonoid) {
        return $foreign.foldMapWithIndexPurs(Data_Monoid.mempty(dictMonoid))(Data_Semigroup.append(dictMonoid.Semigroup0()));
    },
    foldrWithIndex: function (f) {
        return Data_FoldableWithIndex.foldrWithIndexDefault(foldableWithIndexHashMap)(f);
    },
    foldlWithIndex: function (f) {
        return Data_FoldableWithIndex.foldlWithIndexDefault(foldableWithIndexHashMap)(f);
    },
    Foldable0: function () {
        return foldableHashMap;
    }
};
var foldableHashMap = {
    foldMap: function (dictMonoid) {
        return function (f) {
            return Data_FoldableWithIndex.foldMapWithIndex(foldableWithIndexHashMap)(dictMonoid)(Data_Function["const"](f));
        };
    },
    foldr: function (f) {
        return Data_Foldable.foldrDefault(foldableHashMap)(f);
    },
    foldl: function (f) {
        return Data_Foldable.foldlDefault(foldableHashMap)(f);
    }
};
var foldableSemigroupHashMap = foldableHashMap;
var foldableWithIndexSemigroupHashMap = foldableWithIndexHashMap;
var traversableWithIndexHashMap = {
    traverseWithIndex: function (dictApplicative) {
        var pure = Control_Applicative.pure(dictApplicative);
        var apply = Control_Apply.apply(dictApplicative.Apply0());
        return function (f) {
            return function (m) {
                return $foreign.traverseWithIndexPurs(pure)(apply)(f)(m);
            };
        };
    },
    FunctorWithIndex0: function () {
        return functorWithIndexHashMap;
    },
    FoldableWithIndex1: function () {
        return foldableWithIndexHashMap;
    },
    Traversable2: function () {
        return traversableHashMap;
    }
};
var traversableHashMap = {
    traverse: function (dictApplicative) {
        return function (f) {
            return Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexHashMap)(dictApplicative)(Data_Function["const"](f));
        };
    },
    sequence: function (dictApplicative) {
        return Data_Traversable.traverse(traversableHashMap)(dictApplicative)(function (x) {
            return x;
        });
    },
    Functor0: function () {
        return functorHashMap;
    },
    Foldable1: function () {
        return foldableHashMap;
    }
};
var traversableSemigroupHashMap = traversableHashMap;
var traversableWithIndexSemigroupHashMap = traversableWithIndexHashMap;
var filterKeys = function (f) {
    return $foreign.filterWithKey(function (k) {
        return function (v) {
            return f(k);
        };
    });
};
var filter = function (f) {
    return $foreign.filterWithKey(Data_Function["const"](f));
};
var mapMaybeWithKey = function (f) {
    var $157 = map(fromJust);
    var $158 = filter(Data_Maybe.isJust);
    var $159 = mapWithIndex(f);
    return function ($160) {
        return $157($158($159($160)));
    };
};
var mapMaybe = function ($161) {
    return mapMaybeWithKey(Data_Function["const"]($161));
};
var eqHashMap = function (dictEq) {
    var eq = Data_Eq.eq(dictEq);
    return function (dictEq1) {
        return {
            eq: $foreign.eqPurs(eq, Data_Eq.eq(dictEq1))
        };
    };
};
var eqSemigroupHashMap = function (dictEq) {
    var eqHashMap1 = eqHashMap(dictEq);
    return function (dictEq1) {
        return eqHashMap1(dictEq1);
    };
};
var hashHashMap = function (dictHashable) {
    var eqHashMap1 = eqHashMap(dictHashable.Eq0());
    return function (dictHashable1) {
        var eqHashMap2 = eqHashMap1(dictHashable1.Eq0());
        return {
            hash: $foreign.hashPurs(Data_Hashable.hash(dictHashable1)),
            Eq0: function () {
                return eqHashMap2;
            }
        };
    };
};
var hashSemigroupHashMap = function (dictHashable) {
    var hashHashMap1 = hashHashMap(dictHashable);
    return function (dictHashable1) {
        return hashHashMap1(dictHashable1);
    };
};
var $$delete = function (dictHashable) {
    var eq = Data_Eq.eq(dictHashable.Eq0());
    var hash = Data_Hashable.hash(dictHashable);
    return function (k) {
        return $foreign.deletePurs(eq, k, hash(k));
    };
};
var difference = function (dictHashable) {
    var delete1 = $$delete(dictHashable);
    return function (l) {
        return function (r) {
            return foldr(delete1)(l)(keys(r));
        };
    };
};
var applyHashMap = function (dictHashable) {
    return {
        apply: intersectionWith(dictHashable)(identity),
        Functor0: function () {
            return functorHashMap;
        }
    };
};
var applySemigroupHashMap = function (dictHashable) {
    return applyHashMap(dictHashable);
};
var bindHashMap = function (dictHashable) {
    var lookup1 = lookup(dictHashable);
    var applyHashMap1 = applyHashMap(dictHashable);
    return {
        bind: function (m) {
            return function (f) {
                return mapMaybeWithKey(function (k) {
                    var $162 = lookup1(k);
                    return function ($163) {
                        return $162(f($163));
                    };
                })(m);
            };
        },
        Apply0: function () {
            return applyHashMap1;
        }
    };
};
var bindSemigroupHashMap = function (dictHashable) {
    return bindHashMap(dictHashable);
};
var alter = function (dictHashable) {
    var lookup1 = lookup(dictHashable);
    var delete1 = $$delete(dictHashable);
    var insert1 = insert(dictHashable);
    return function (f) {
        return function (k) {
            return function (m) {
                var v = f(lookup1(k)(m));
                if (v instanceof Data_Maybe.Nothing) {
                    return delete1(k)(m);
                };
                if (v instanceof Data_Maybe.Just) {
                    return insert1(k)(v.value0)(m);
                };
                throw new Error("Failed pattern match at Data.HashMap (line 311, column 15 - line 313, column 25): " + [ v.constructor.name ]);
            };
        };
    };
};
var update = function (dictHashable) {
    var alter1 = alter(dictHashable);
    return function (f) {
        return alter1(function (v) {
            return bind(v)(f);
        });
    };
};
export {
    empty,
    size,
    isEmpty,
    filterWithKey,
    toArrayBy,
    debugShow
} from "./foreign.js";
export {
    singleton,
    lookup,
    insert,
    $$delete as delete,
    member,
    upsert,
    insertWith,
    update,
    alter,
    filter,
    filterKeys,
    mapMaybe,
    mapMaybeWithKey,
    fromArray,
    fromFoldable,
    fromArrayBy,
    fromFoldableBy,
    fromFoldableWithIndex,
    keys,
    values,
    union,
    unionWith,
    intersection,
    intersectionWith,
    difference,
    SemigroupHashMap,
    nubHash,
    eqHashMap,
    hashHashMap,
    monoidHashMap,
    semigroupHashMap,
    functorHashMap,
    functorWithIndexHashMap,
    applyHashMap,
    bindHashMap,
    foldableHashMap,
    foldableWithIndexHashMap,
    traversableHashMap,
    traversableWithIndexHashMap,
    newtypeSemigroupHashMap,
    eqSemigroupHashMap,
    hashSemigroupHashMap,
    functorSemigroupHashMap,
    functorWithIndexSemigroupHashMap,
    applySemigroupHashMap,
    bindSemigroupHashMap,
    foldableSemigroupHashMap,
    foldableWithIndexSemigroupHashMap,
    traversableSemigroupHashMap,
    traversableWithIndexSemigroupHashMap,
    showSemigroupHashMap,
    semigroupSemigroupHashMap,
    monoidSemigroupHashMap,
    showHashMap
};
