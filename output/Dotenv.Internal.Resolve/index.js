// Generated by purs version 0.15.7
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Dotenv_Internal_ChildProcess from "../Dotenv.Internal.ChildProcess/index.js";
import * as Dotenv_Internal_Environment from "../Dotenv.Internal.Environment/index.js";
import * as Dotenv_Internal_Types from "../Dotenv.Internal.Types/index.js";
import * as Run from "../Run/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Run.applicativeRun);
var bind = /* #__PURE__ */ Control_Bind.bind(Run.bindRun);
var map = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var find = /* #__PURE__ */ Data_Foldable.find(Data_Foldable.foldableArray);
var eq = /* #__PURE__ */ Data_Eq.eq(Data_Eq.eqString);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray)(Run.applicativeRun);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe);
var map1 = /* #__PURE__ */ Data_Functor.map(Run.functorRun);
var resolveValue = function (settings) {
    return function (v) {
        if (v instanceof Dotenv_Internal_Types.LiteralValue) {
            return pure(new Data_Maybe.Just(v.value0));
        };
        if (v instanceof Dotenv_Internal_Types.CommandSubstitution) {
            return bind(Dotenv_Internal_ChildProcess.spawn(v.value0)(v.value1))(function (value) {
                return pure(new Data_Maybe.Just(Data_String_Common.trim(value)));
            });
        };
        if (v instanceof Dotenv_Internal_Types.VariableSubstitution) {
            return bind(Dotenv_Internal_Environment.lookupEnv(v.value0))(function (envValueMaybe) {
                if (envValueMaybe instanceof Data_Maybe.Just) {
                    return pure(new Data_Maybe.Just(envValueMaybe.value0));
                };
                if (envValueMaybe instanceof Data_Maybe.Nothing) {
                    var v1 = map(Data_Tuple.snd)(find((function () {
                        var $27 = eq(v.value0);
                        return function ($28) {
                            return $27(Data_Tuple.fst($28));
                        };
                    })())(settings));
                    if (v1 instanceof Data_Maybe.Just) {
                        return resolveValue(settings)(v1.value0);
                    };
                    if (v1 instanceof Data_Maybe.Nothing) {
                        return pure(Data_Maybe.Nothing.value);
                    };
                    throw new Error("Failed pattern match at Dotenv.Internal.Resolve (line 34, column 9 - line 38, column 25): " + [ v1.constructor.name ]);
                };
                throw new Error("Failed pattern match at Dotenv.Internal.Resolve (line 30, column 5 - line 38, column 25): " + [ envValueMaybe.constructor.name ]);
            });
        };
        if (v instanceof Dotenv_Internal_Types.ValueExpression) {
            return bind(traverse(resolveValue(settings))(v.value0))(function (resolvedValues) {
                return pure(map(Data_String_Common.joinWith(""))(sequence(resolvedValues)));
            });
        };
        throw new Error("Failed pattern match at Dotenv.Internal.Resolve (line 22, column 25 - line 41, column 51): " + [ v.constructor.name ]);
    };
};
var resolveValues = function (settings) {
    var v = Data_Array.unzip(settings);
    return map1(Data_Array.zip(v.value0))(traverse(resolveValue(settings))(v.value1));
};
export {
    resolveValues
};
