// Generated by purs version 0.15.7
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Functor_Variant from "../Data.Functor.Variant/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Run from "../Run/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var on = /* #__PURE__ */ Data_Functor_Variant.on();
var pure = /* #__PURE__ */ Control_Applicative.pure(Run.applicativeRun);
var bind = /* #__PURE__ */ Control_Bind.bind(Run.bindRun);
var map = /* #__PURE__ */ Data_Functor.map(Run.functorRun);
var lift = /* #__PURE__ */ Run.lift();
var exceptIsSymbol = {
    reflectSymbol: function () {
        return "except";
    }
};
var Except = function (x) {
    return x;
};
var runExceptAt = function (dictIsSymbol) {
    var on1 = on(dictIsSymbol);
    return function () {
        return function (sym) {
            var handle = on1(sym)(Data_Either.Left.create)(Data_Either.Right.create);
            var loop = function (r) {
                var v = Run.peel(r);
                if (v instanceof Data_Either.Left) {
                    var v1 = handle(v.value0);
                    if (v1 instanceof Data_Either.Left) {
                        return pure(new Data_Either.Left(v1.value0));
                    };
                    if (v1 instanceof Data_Either.Right) {
                        return bind(Run.send(v1.value0))(loop);
                    };
                    throw new Error("Failed pattern match at Run.Except (line 163, column 15 - line 167, column 29): " + [ v1.constructor.name ]);
                };
                if (v instanceof Data_Either.Right) {
                    return pure(new Data_Either.Right(v.value0));
                };
                throw new Error("Failed pattern match at Run.Except (line 162, column 12 - line 169, column 21): " + [ v.constructor.name ]);
            };
            return loop;
        };
    };
};
var runFailAt = function (dictIsSymbol) {
    var runExceptAt1 = runExceptAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            var $71 = map(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create));
            var $72 = runExceptAt1(sym);
            return function ($73) {
                return $71($72($73));
            };
        };
    };
};
var functorExcept = {
    map: function (f) {
        return function (m) {
            return m;
        };
    }
};
var liftExceptAt = function (dictIsSymbol) {
    var lift1 = lift(dictIsSymbol)(functorExcept);
    return function () {
        return lift1;
    };
};
var throwAt = function (dictIsSymbol) {
    var liftExceptAt1 = liftExceptAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            var $74 = liftExceptAt1(sym);
            return function ($75) {
                return $74(Except($75));
            };
        };
    };
};
var noteAt = function (dictIsSymbol) {
    var throwAt1 = throwAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return function (e) {
                return Data_Maybe["maybe$prime"](function (v) {
                    return throwAt1(sym)(e);
                })(pure);
            };
        };
    };
};
var rethrowAt = function (dictIsSymbol) {
    var throwAt1 = throwAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return Data_Either.either(throwAt1(sym))(pure);
        };
    };
};
var fromJustAt = function (dictIsSymbol) {
    var noteAt1 = noteAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return noteAt1(sym)(Data_Unit.unit);
        };
    };
};
var failAt = function (dictIsSymbol) {
    var throwAt1 = throwAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return throwAt1(sym)(Data_Unit.unit);
        };
    };
};
var catchAt = function (dictIsSymbol) {
    var on1 = on(dictIsSymbol);
    return function () {
        return function (sym) {
            var handle = on1(sym)(Data_Either.Left.create)(Data_Either.Right.create);
            var loop = function (k) {
                return function (r) {
                    var v = Run.peel(r);
                    if (v instanceof Data_Either.Left) {
                        var v1 = handle(v.value0);
                        if (v1 instanceof Data_Either.Left) {
                            return k(v1.value0);
                        };
                        if (v1 instanceof Data_Either.Right) {
                            return bind(Run.send(v1.value0))(loop(k));
                        };
                        throw new Error("Failed pattern match at Run.Except (line 141, column 15 - line 145, column 31): " + [ v1.constructor.name ]);
                    };
                    if (v instanceof Data_Either.Right) {
                        return pure(v.value0);
                    };
                    throw new Error("Failed pattern match at Run.Except (line 140, column 14 - line 147, column 13): " + [ v.constructor.name ]);
                };
            };
            return loop;
        };
    };
};
var _except = /* #__PURE__ */ (function () {
    return Type_Proxy["Proxy"].value;
})();
var $$catch = /* #__PURE__ */ catchAt(exceptIsSymbol)()(_except);
var fail = /* #__PURE__ */ failAt(exceptIsSymbol)()(_except);
var fromJust = /* #__PURE__ */ fromJustAt(exceptIsSymbol)()(_except);
var liftExcept = /* #__PURE__ */ liftExceptAt(exceptIsSymbol)()(_except);
var note = /* #__PURE__ */ noteAt(exceptIsSymbol)()(_except);
var rethrow = /* #__PURE__ */ rethrowAt(exceptIsSymbol)()(_except);
var runExcept = /* #__PURE__ */ runExceptAt(exceptIsSymbol)()(_except);
var runFail = /* #__PURE__ */ runFailAt(exceptIsSymbol)()(_except);
var $$throw = /* #__PURE__ */ throwAt(exceptIsSymbol)()(_except);
export {
    Except,
    _except,
    liftExcept,
    liftExceptAt,
    runExcept,
    runExceptAt,
    runFail,
    runFailAt,
    $$throw as throw,
    throwAt,
    fail,
    failAt,
    rethrow,
    rethrowAt,
    note,
    noteAt,
    fromJust,
    fromJustAt,
    $$catch as catch,
    catchAt,
    functorExcept
};
