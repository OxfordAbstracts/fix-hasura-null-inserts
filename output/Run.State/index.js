// Generated by purs version 0.15.7
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Functor_Variant from "../Data.Functor.Variant/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Run from "../Run/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var on = /* #__PURE__ */ Data_Functor_Variant.on();
var bind = /* #__PURE__ */ Control_Bind.bind(Run.bindRun);
var pure = /* #__PURE__ */ Control_Applicative.pure(Run.applicativeRun);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorFn);
var lift = /* #__PURE__ */ Run.lift();
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var map1 = /* #__PURE__ */ Data_Functor.map(Run.functorRun);
var stateIsSymbol = {
    reflectSymbol: function () {
        return "state";
    }
};
var State = /* #__PURE__ */ (function () {
    function State(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    State.create = function (value0) {
        return function (value1) {
            return new State(value0, value1);
        };
    };
    return State;
})();
var runStateAt = function (dictIsSymbol) {
    var on1 = on(dictIsSymbol);
    return function () {
        return function (sym) {
            var handle = on1(sym)(Data_Either.Left.create)(Data_Either.Right.create);
            var loop = function ($copy_s) {
                return function ($copy_r) {
                    var $tco_var_s = $copy_s;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(s, r) {
                        var v = Run.peel(r);
                        if (v instanceof Data_Either.Left) {
                            var v1 = handle(v.value0);
                            if (v1 instanceof Data_Either.Left) {
                                var s$prime = v1.value0.value0(s);
                                $tco_var_s = s$prime;
                                $copy_r = v1.value0.value1(s$prime);
                                return;
                            };
                            if (v1 instanceof Data_Either.Right) {
                                $tco_done = true;
                                return bind(Run.send(v1.value0))(runStateAt(dictIsSymbol)()(sym)(s));
                            };
                            throw new Error("Failed pattern match at Run.State (line 117, column 15 - line 124, column 41): " + [ v1.constructor.name ]);
                        };
                        if (v instanceof Data_Either.Right) {
                            $tco_done = true;
                            return pure(new Data_Tuple.Tuple(s, v.value0));
                        };
                        throw new Error("Failed pattern match at Run.State (line 116, column 14 - line 126, column 23): " + [ v.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_s, $copy_r);
                    };
                    return $tco_result;
                };
            };
            return loop;
        };
    };
};
var functorState = {
    map: function (f) {
        return function (m) {
            return new State(m.value0, map(f)(m.value1));
        };
    }
};
var liftStateAt = function (dictIsSymbol) {
    var lift1 = lift(dictIsSymbol)(functorState);
    return function () {
        return lift1;
    };
};
var getAt = function (dictIsSymbol) {
    var liftStateAt1 = liftStateAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return liftStateAt1(sym)(new State(identity, identity));
        };
    };
};
var getsAt = function (dictIsSymbol) {
    var getAt1 = getAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return Data_Function.flip(map1)(getAt1(sym));
        };
    };
};
var modifyAt = function (dictIsSymbol) {
    var liftStateAt1 = liftStateAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return function (f) {
                return liftStateAt1(sym)(new State(f, Data_Function["const"](Data_Unit.unit)));
            };
        };
    };
};
var putAt = function (dictIsSymbol) {
    var modifyAt1 = modifyAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            var $65 = modifyAt1(sym);
            return function ($66) {
                return $65(Data_Function["const"]($66));
            };
        };
    };
};
var execStateAt = function (dictIsSymbol) {
    var runStateAt1 = runStateAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return function (s) {
                var $67 = map1(Data_Tuple.fst);
                var $68 = runStateAt1(sym)(s);
                return function ($69) {
                    return $67($68($69));
                };
            };
        };
    };
};
var evalStateAt = function (dictIsSymbol) {
    var runStateAt1 = runStateAt(dictIsSymbol)();
    return function () {
        return function (sym) {
            return function (s) {
                var $70 = map1(Data_Tuple.snd);
                var $71 = runStateAt1(sym)(s);
                return function ($72) {
                    return $70($71($72));
                };
            };
        };
    };
};
var _state = /* #__PURE__ */ (function () {
    return Type_Proxy["Proxy"].value;
})();
var evalState = /* #__PURE__ */ evalStateAt(stateIsSymbol)()(_state);
var execState = /* #__PURE__ */ execStateAt(stateIsSymbol)()(_state);
var get = /* #__PURE__ */ getAt(stateIsSymbol)()(_state);
var gets = /* #__PURE__ */ getsAt(stateIsSymbol)()(_state);
var liftState = /* #__PURE__ */ liftStateAt(stateIsSymbol)()(_state);
var modify = /* #__PURE__ */ modifyAt(stateIsSymbol)()(_state);
var put = /* #__PURE__ */ putAt(stateIsSymbol)()(_state);
var runState = /* #__PURE__ */ runStateAt(stateIsSymbol)()(_state);
export {
    State,
    _state,
    liftState,
    liftStateAt,
    modify,
    modifyAt,
    put,
    putAt,
    get,
    getAt,
    gets,
    getsAt,
    runState,
    runStateAt,
    evalState,
    evalStateAt,
    execState,
    execStateAt,
    functorState
};
