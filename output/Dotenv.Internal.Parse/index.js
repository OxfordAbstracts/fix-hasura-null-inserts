// Generated by purs version 0.15.7
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Dotenv_Internal_Types from "../Dotenv.Internal.Types/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_Combinators from "../Parsing.Combinators/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
var applyFirst = /* #__PURE__ */ Control_Apply.applyFirst(Parsing.applyParserT);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Parsing.applyParserT);
var map = /* #__PURE__ */ Data_Functor.map(Parsing.functorParserT);
var some = /* #__PURE__ */ Data_Array.some(Parsing.alternativeParserT)(Parsing.lazyParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var many = /* #__PURE__ */ Data_Array.many(Parsing.alternativeParserT)(Parsing.lazyParserT);
var bind = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var pure = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var $$void = /* #__PURE__ */ Data_Functor["void"](Parsing.functorParserT);
var whitespaceChars = [ " ", "\x09" ];
var variableSubstitution = /* #__PURE__ */ applyFirst(/* #__PURE__ */ applySecond(/* #__PURE__ */ Parsing_String.string("${"))(/* #__PURE__ */ map(function ($19) {
    return Dotenv_Internal_Types.VariableSubstitution.create(Data_String_CodeUnits.fromCharArray($19));
})(/* #__PURE__ */ some(/* #__PURE__ */ alt(Parsing_String_Basic.alphaNum)(/* #__PURE__ */ Parsing_String["char"]("_"))))))(/* #__PURE__ */ Parsing_String["char"]("}"));
var valueFromValues = function (v) {
    if (Data_Array.length(v) === 1) {
        return Data_Maybe.fromMaybe(new Dotenv_Internal_Types.ValueExpression([  ]))(Data_Array.head(v));
    };
    if (Data_Boolean.otherwise) {
        return new Dotenv_Internal_Types.ValueExpression(v);
    };
    throw new Error("Failed pattern match at Dotenv.Internal.Parse (line 80, column 1 - line 80, column 60): " + [ v.constructor.name ]);
};
var newlineChars = [ "\x0d", "\x0a" ];
var name = /* #__PURE__ */ applyFirst(/* #__PURE__ */ map(Data_String_CodeUnits.fromCharArray)(/* #__PURE__ */ many(/* #__PURE__ */ alt(Parsing_String_Basic.alphaNum)(/* #__PURE__ */ Parsing_String["char"]("_")))))(/* #__PURE__ */ Parsing_String["char"]("="));
var comment = /* #__PURE__ */ applySecond(/* #__PURE__ */ Parsing_String["char"]("#"))(/* #__PURE__ */ map(Data_String_CodeUnits.fromCharArray)(/* #__PURE__ */ many(/* #__PURE__ */ Parsing_String_Basic.noneOf(newlineChars))));
var commandSubstitution = /* #__PURE__ */ bind(/* #__PURE__ */ Parsing_String.string("$("))(function () {
    return bind(map(Data_String_CodeUnits.fromCharArray)(some(Parsing_String_Basic.noneOf(Data_Array.cons(")")(whitespaceChars)))))(function (command) {
        return bind(many(applySecond(Parsing_String_Basic.whiteSpace)(map(Data_String_CodeUnits.fromCharArray)(some(Parsing_String_Basic.noneOf(Data_Array.cons(")")(whitespaceChars)))))))(function ($$arguments) {
            return bind(applySecond(Parsing_String_Basic.whiteSpace)(Parsing_String["char"](")")))(function () {
                return pure(new Dotenv_Internal_Types.CommandSubstitution(command, $$arguments));
            });
        });
    });
});
var quotedValue = function (q) {
    var literal = map(function ($20) {
        return Dotenv_Internal_Types.LiteralValue.create(Data_String_CodeUnits.fromCharArray($20));
    })(some(alt(Parsing_String_Basic.noneOf([ "$", q ]))(Parsing_Combinators["try"](applyFirst(Parsing_String["char"]("$"))(Parsing_Combinators.notFollowedBy(Parsing_String_Basic.oneOf([ "{", "(" ])))))));
    return map(valueFromValues)(applyFirst(applySecond(Parsing_String["char"](q))(some(alt(variableSubstitution)(alt(commandSubstitution)(literal)))))(Parsing_String["char"](q)));
};
var unquotedValue = /* #__PURE__ */ (function () {
    var literal = map(function ($21) {
        return Dotenv_Internal_Types.LiteralValue.create(Data_String_CodeUnits.fromCharArray($21));
    })(some(alt(Parsing_Combinators["try"](Parsing_String_Basic.noneOf(append([ "$", "#" ])(append(whitespaceChars)(newlineChars)))))(alt(Parsing_Combinators["try"](applyFirst(Parsing_String["char"]("$"))(Parsing_Combinators.notFollowedBy(Parsing_String_Basic.oneOf([ "{", "(" ])))))(Parsing_Combinators["try"](applyFirst(Parsing_String_Basic.oneOf(whitespaceChars))(Parsing_Combinators.lookAhead(Parsing_String_Basic.noneOf(append([ "#" ])(append(whitespaceChars)(newlineChars))))))))));
    return map(valueFromValues)(applySecond(Parsing_String_Basic.whiteSpace)(some(alt(variableSubstitution)(alt(commandSubstitution)(literal)))));
})();
var value = /* #__PURE__ */ Parsing_Combinators.withErrorMessage(/* #__PURE__ */ alt(/* #__PURE__ */ quotedValue("\""))(/* #__PURE__ */ alt(/* #__PURE__ */ quotedValue("'"))(unquotedValue)))("variable value");
var setting = /* #__PURE__ */ (function () {
    return Control_Apply.apply(Parsing.applyParserT)(map(Data_Tuple.Tuple.create)(name))(value);
})();
var settings = /* #__PURE__ */ (function () {
    var notSetting = alt($$void(comment))($$void(Parsing_String_Basic.oneOf(newlineChars)));
    return map(Data_Array.fromFoldable(Data_List_Types.foldableList))(Control_Bind.discard(Control_Bind.discardUnit)(Parsing.bindParserT)(Parsing_Combinators.skipMany(notSetting))(function () {
        return Parsing_Combinators.sepEndBy(applyFirst(setting)(many(Parsing_String_Basic.noneOf(newlineChars))))(Parsing_Combinators.skipMany(notSetting));
    }));
})();
export {
    newlineChars,
    whitespaceChars,
    settings,
    comment,
    name,
    variableSubstitution,
    commandSubstitution,
    quotedValue,
    unquotedValue,
    valueFromValues,
    value,
    setting
};
